plugins {
    id 'com.android.library'
    id 'maven-publish'
}
//apply plugin: 'maven-publish'
def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("github.properties")))

android {
    namespace 'com.speedum.jitsi_lib'
    compileSdk 32

    defaultConfig {
//        applicationId "com.speedum.jitsi_lib"
        minSdk 23
//        targetSdk 32

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    publishing {
        singleVariant("release") {
            // if you don't want sources/javadoc, remove these lines
//            withSourcesJar()
//            withJavadocJar()
        }
    }
}



def getGroupID = { ->
    return "com.speedum.libraries" // Replace with version Name
}
def getVersionName = { ->
    return "1.0.0" // Version code of lib
}

def getArtificatId = { ->
    return "jitsi" // library name ID
}
def getArrPath = { ->
    return "$buildDir"
}

publishing {
    publications {
        maven(MavenPublication){
//        release(MavenPublication) {
//        bar(MavenPublication){
            groupId = getGroupID()
            artifactId = getArtificatId()
            version = getVersionName()
            artifact("${getArrPath()}/outputs/aar/jitsilib-release.aar")
        }
    }

    repositories {
        mavenCentral()
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Gsidhu900/jitsi_library")
//            url = uri("https://maven.pkg.github.com/nitinSpeedum/health_store_lib_android")

            credentials {
                username = githubProperties['gpr.usr'] ?: System.getenv("gsidhu900")
                password = githubProperties['gpr.key'] ?: System.getenv("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")
//                  username = githubProperties['gpr.usr'] ?: System.getenv("nitinSpeedum")
//                password = githubProperties['gpr.key'] ?: System.getenv("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")
            }
        }
    }

}


dependencies {

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation ('org.jitsi.react:jitsi-meet-sdk:6.2.2') { transitive = true }

    // retrofit lib///
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'org.glassfish:javax.annotation:10.0-b28'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp:okhttp-urlconnection:2.7.5'
    implementation 'com.squareup.okhttp:logging-interceptor:2.7.5'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.10'

    /*Encryption*/
    implementation "com.scottyab:aescrypt:0.0.1"

    /*Snack bar*/
    implementation 'com.nispok:snackbar:2.11.+'
}